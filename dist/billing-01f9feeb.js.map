{"version":3,"file":"billing-01f9feeb.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx"],"sourcesContent":["import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { RefObject, useRef, useState } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressForm,\n    AddressFormValues,\n    AddressSelect,\n    AddressType,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isValidCustomerAddress,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\nconst BillingForm = ({\n    googleMapsApiKey,\n    billingAddress,\n    countriesWithAutocomplete,\n    customer: { addresses, isGuest },\n    getFields,\n    countries,\n    isUpdating,\n    setFieldValue,\n    shouldShowOrderComments,\n    values,\n    methodId,\n    isFloatingLabelEnabled,\n    updateAddress,\n    onUnhandledError,\n}: BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\n    const [isResettingAddress, setIsResettingAddress] = useState(false);\n    const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\n    const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n    const shouldRenderStaticAddress = methodId === 'amazonpay';\n    const allFormFields = getFields(values.countryCode);\n    const customFormFields = allFormFields.filter(({ custom }) => custom);\n    const hasCustomFormFields = customFormFields.length > 0;\n    const editableFormFields =\n        shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n    const billingAddresses = isPayPalFastlaneEnabled ? paypalFastlaneAddresses : addresses;\n    const hasAddresses = billingAddresses?.length > 0;\n    const hasValidCustomerAddress =\n        billingAddress &&\n        isValidCustomerAddress(\n            billingAddress,\n            billingAddresses,\n            getFields(billingAddress.countryCode),\n        );\n\n    const handleSelectAddress = async (address: Partial<Address>) => {\n        setIsResettingAddress(true);\n\n        try {\n            await updateAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        } finally {\n            setIsResettingAddress(false);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        handleSelectAddress({});\n    };\n\n    const isInvoiceRequired = billingAddress?.customFields?.some(\n        field => field.fieldId === 'field_32' && field.fieldValue === 'Y'\n    ) || false; // Imposta false di default se `customFields` Ã¨ undefined\n\n    const pivaField = editableFormFields.find(field => field.id === \"field_30\");\n\n    if (pivaField) {\n        pivaField.required = isInvoiceRequired;\n    }\n\n    /*const companyField = editableFormFields.find(field => field.name === \"company\");\n\n    if (companyField) {\n        companyField.required = isInvoiceRequired;\n    }*/\n\n    return (\n        <Form autoComplete=\"on\">\n            {shouldRenderStaticAddress && billingAddress && (\n                <div className=\"form-fieldset\">\n                    <StaticBillingAddress address={billingAddress} />\n                </div>\n            )}\n\n            <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\n                {hasAddresses && !shouldRenderStaticAddress && (\n                    <Fieldset id=\"billingAddresses\">\n                        <LoadingOverlay isLoading={isResettingAddress}>\n                            <AddressSelect\n                                addresses={billingAddresses}\n                                onSelectAddress={handleSelectAddress}\n                                onUseNewAddress={handleUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? billingAddress : undefined\n                                }\n                                type={AddressType.Billing}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <AddressFormSkeleton isLoading={isResettingAddress}>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={values.countryCode}\n                            formFields={editableFormFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            isFloatingLabelEnabled={isFloatingLabelEnabled}\n                            setFieldValue={setFieldValue}\n                            shouldShowSaveAddress={!isGuest}\n                        />\n                    </AddressFormSkeleton>\n                )}\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={isUpdating || isResettingAddress}\n                    id=\"checkout-billing-continue\"\n                    isLoading={isUpdating || isResettingAddress}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n            ...mapAddressToFormValues(\n                getFields(billingAddress && billingAddress.countryCode),\n                billingAddress,\n            ),\n            orderComment: customerMessage,\n        }),\n        isInitialValid: ({ billingAddress, getFields, language }) =>\n            !!billingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(billingAddress.countryCode),\n            }).isValidSync(billingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: BillingFormProps & WithLanguageProps) =>\n            methodId === 'amazonpay'\n                ? lazy<Partial<AddressFormValues>>((values) =>\n                    getCustomFormFieldsValidationSchema({\n                        translate: getTranslateAddressError(language),\n                        formFields: getFields(values && values.countryCode),\n                    }),\n                )\n                : lazy<Partial<AddressFormValues>>((values) =>\n                    getAddressFormFieldsValidationSchema({\n                        language,\n                        formFields: getFields(values && values.countryCode),\n                    }),\n                ),\n        enableReinitialize: true,\n    })(BillingForm),\n);\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import {\n    Address,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout } from '../checkout';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\nimport getBillingMethodId from './getBillingMethodId';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    isFloatingLabelEnabled?: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, onReady = noop, onUnhandledError } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const { updateAddress, isInitializing, ...props } = this.props;\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <div className=\"form-legend-container\">\n                        <Legend testId=\"billing-address-heading\">\n                            <TranslatedString id=\"billing.billing_address_heading\" />\n                        </Legend>\n                    </div>\n                    <BillingForm\n                        {...props}\n                        onSubmit={this.handleSubmit}\n                        updateAddress={updateAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const { enableOrderComments, googleMapsApiKey } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ', 'GB'];\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        isFloatingLabelEnabled: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"names":["withLanguage","withFormik","handleSubmit","values","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","countryCode","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","formFields","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","googleMapsApiKey","countriesWithAutocomplete","customer","addresses","isGuest","countries","isUpdating","setFieldValue","shouldShowOrderComments","methodId","isFloatingLabelEnabled","updateAddress","onUnhandledError","useState","isResettingAddress","setIsResettingAddress","addressFormRef","useRef","usePayPalFastlaneAddress","isPayPalFastlaneEnabled","paypalFastlaneAddresses","shouldRenderStaticAddress","allFormFields","customFormFields","filter","hasCustomFormFields","length","editableFormFields","billingAddresses","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","handleSelectAddress","address","Error","isInvoiceRequired","customFields","some","field","fieldId","fieldValue","pivaField","find","id","required","Form","autoComplete","className","StaticBillingAddress","Fieldset","ref","LoadingOverlay","isLoading","AddressSelect","A","onSelectAddress","onUseNewAddress","selectedAddress","undefined","type","AddressType","Billing","AddressFormSkeleton","AddressForm","shouldShowSaveAddress","OrderComments","Button","disabled","variant","Primary","TranslatedString","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","addressValues","this","props","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","noop","render","isInitializing","Legend","testId","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","checkoutSettings","enableOrderComments","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress"],"sourceRoot":""}